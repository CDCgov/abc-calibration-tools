from abctools import abc_methods
from abctools.abc_classes import SimulationBundle
from gcm_python_wrappers import utils, wrappers

import random
import polars as pl

def experiment_manager(config: str, **kwargs) -> SimulationBundle:
    """
    Overall wrapper function to take in pipeline workflow as dictionary and relevant conditions as a config path 
    
    Returns SimulationBundle object
    """

    # Define experiment mode
    if "mode" in kwargs:
        experiment_mode = kwargs["mode"]
    else:
        raise ValueError("Mode not specified")
    
    # Seed for stochastic simulations. Set to None to draw randomly
    if "random_seed" in kwargs:
        if kwargs["random_seed"] is not None:
            seed = kwargs["random_seed"]
        else:
            seed = random.randint(0, 2**32 - 1)
    elif experiment_mode == "test":
        print("Test mode selected without seed. Defaulting to 0")
        seed = 0
    else: #This seed should be pseudorandomly drawn and reported for several modes
        raise ValueError("Random seed not specified")

    baseline_params_input = {}

    # Create baseline_params by updating default_params with baseline_params_input
    # This can be changed to allow for baseline parameter draws according to user-defined rules instead
    baseline_params, summary_string = utils.load_baseline_params(
        config, baseline_params_input
    )

    # Set up Azure client if defined
    if "downloader" in kwargs:
        azure_batch = True
        create_pool = kwargs["create_pool"]

        client, blob_container_name, job_prefix = utils.initialize_azure_client(
            config, experiment_mode, create_pool
        )

        if client and blob_container_name and job_prefix:
            print("Azure Client initialized successfully.")
        else:
            print("Failed to initialize Azure Client.")
    else:
        client = None
        blob_container_name = None
        job_prefix = None
        azure_batch = False
    
    # If random sampler provided, add inputs generated by sampler function 
    if "random_sampler" in kwargs:
        if "sampler_method" in kwargs:
            method = kwargs["sampler_method"]
        else:
            method = "sobol"
        sampler_method = kwargs["sampler_method"]

        # Draw simulation parameters (function call should be user specified recipe under sampler)
        input_data = abc_methods.draw_simulation_parameters(
            params_inputs=kwargs["random_sampler"],
            n_simulations=kwargs["param_sets"],
            method=sampler_method,
            seed=seed
        )
    else:
        input_data = pl.DataFrame({"simulation": 0, "randomSeed": seed})

    # Create SimulationBundle using inputs - always generated if no bundle passed
    if "bundle" in kwargs:
        if "random_sampler" in kwargs:
            raise ValueError("Cannot pass in both random_sampler and bundle. Define parameters through config or use bundle_sampler")
        else:
            init_bundle = kwargs["bundle"]
    else:
        init_bundle = SimulationBundle(
            inputs=input_data,
            step_number=0,
            baseline_params=baseline_params,
        )

    # Directory management with keyed in or default values
    if "wd" in kwargs:
        dir = kwargs["wd"]
    else:
        dir = "."
    
    if "subwd" in kwargs:
        sub_dir = kwargs["subwd"]
    else:
        sub_dir = "simulations"

    # Making specified folders to house simulations if writing
    if "writer" in kwargs["protocol"]:
        wrappers.gcm_experiments_writer(
            experiments_dir=dir,
            super_experiment_name=experiment_mode,
            sub_experiment_name=sub_dir,
            simulations_dict=init_bundle.writer_input_dict,
            azure_batch=azure_batch,
            azure_client=client,
            blob_container_name=blob_container_name,
        )

    product_bundle = init_bundle

    return product_bundle
